SLIDES -------------------------------------------------------
-- Heap - memory that can be allocated and deallocated

-- Stack - a contiguous section of memory used for passing arguments

-- Registers - Storage elements as close as possible to the central processing unit (CPU)

-- Instruction Pointer (IP) - AKA Program Counter (PC) contains the address of next instruction to be executed

-- Stack Pointer (SP) - Contains the address of the next available space on the stack

-- Base Pointer (BP) - The base of the stack

-- Function - Code that is separate from the main program that is often used to replace code the repeats in order to make the program smaller and more efficient

-- Shellcode - The code that is executed once an exploit successfully takes advantage of a vulnerability

BUFFER OVERFLOW DEFENSES
  -  Non executable (NX) stack

  - Address Space Layout Randomization (ASLR)

  - Data Execution Prevention (DEP)

  - Stack Canaries

  - Position Independent Executable (PIE)

TECHNICAL HELP
Utilizing tools such as:

 -- IDA, GHIDRA  - DISASSEMBLERS

 -- GDB, MONA, IMMUNITY - DEBUGGERS. MONA IS A PYTHJON PLUGIN FOR IMMUNITY

 -- BASH, PYTHON - exploits 
GDB USES
    - peda install plugin
        - git clone https://github.com/longld/peda.git ~/peda
echo "source ~/peda/peda.py" >> ~/.gdbinit
    - common commands
    - disass <FUNCTION>   
        -Disassemble portion of the program
    - info <...>  
        - Supply info for specific stack areas
    - x/256c $<REGISTER>  
        -   Read characters from specific register
    - break <address>  
        - Establish a break point
        
SLIDES ---------------------------------
0. CHECK IF ASLR IS ACTIVE
    - sudo cat /proc/sys/kernel/randomize_va_space
1. FIND VULNERABLE PROGRAM

- Two ways a script can take info from user, either as a parameter ( func.py penis), or input
- use pdisass <function> starting with main 
- the "gets()" function is vulnerable to buffer overflow 
- if you see segmentation fault the program is vulnerable to buffer overflwo 
2. OVERFLOW TO INSTRUCTION POINTER
- need to overflow to instruction pointer
- <<< "open to the input of" 
- maybe use python 2 
- run <<< $(python2 sgtwilson.py) 
- if it worked EIP will be whatever we set it too in our script 
- specify our OWN EIP
3. OPEN GDB AND UNSET VARIABLES
- open base gdb 
    -  env - gdb <program>
- unset variables
    - show env
    - unset env <var>
4. GRAB ENTIRE HEAP
- run program, overflow it
    - info proc map 

- use find command 
        - find /b 0xf7de2000, 0xffffe000, 0xff, 0xe4
        - the 0xff and 0xe4 will always be the same, the memory addresses are dynamic
- first heap memory address starts under the [HEAP] entry 
- last memory address is the [stack] 
- will provide all jump ids, all of them will work
- grab handful of ids
- copy paste handful of ids into a comment in your script so you dont have to do this again.
- x86 is little endian
- must be in reverse byte order 
5. REVERSE BYTE ORDER 
      - 0xf7f68ee3
         - '\xe3\x8e\xf6\xf7'
      - 0xf7f68f9b
      - 0xf7f69043
      - python recognizes bytes as \x<byte>
      - replace the EIP value with the reverse byte order of the memory addr
      - add NOP
          - nop = '\x90' * 10
          - make sure to add nop to your print statement
          
6. ACTIONS, MSFVENOM/MSFCONSOLE 
    - creating shell code
    - keep it simple or you are fucked 
    - MSFVENOM
          - -p specify payload 
          - linux/x86/exec == executes a command
          - cmd = <command> 
          - -b == bad characters '\x00'
              - any character that will cause errors, null characters will stop code. so get rid of it 
          - -f == format, use python 
    - FULL MSF VENOM COMMAND CURRENTLY == msfvenom -p linux/x86/exec cmd="whoami" -b '\x00' -f python ### REPLACE THE 'whoami' WITH WHATEVER COMMAND
    - GO CRAZY 
    - COPY PASTE SHELL CODE INTO SCRIPT AND ADD THE "buf" VARIABLE TO THE PRINT STATEMENT 
    - MSFCONSOLE 
        - use payload <payload>
        - set cmd "whoami"
        - generate payload
            - generate -b '\x00' -f python 
SCRIPT 
CTFD 
    --
    0xf7def000 - BOTTOM OF HEAP 
    0xffffe000 - TOP OF HEAP 
    -
    
